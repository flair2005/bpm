#include "./lib/BpmWindow.h"#include "./lib/ModeSelectorWindow.h"#include <iostream>#include <boost/thread.hpp>#include <opencv2/core/core.hpp>#include <opencv2/highgui/highgui.hpp>#include <opencv2/opencv.hpp>#include <highgui.h>#include <opencv2/imgproc/imgproc_c.h>// Classes#include "./lib/Middleware.h"#include "./lib/Detector.h"// Functions#include "./lib/imageOperation.h"// Configuration#include "./constants.h"#include <QApplication>extern "C" {#include <libavutil/imgutils.h>#include <libavcodec/avcodec.h>#include <libswscale/swscale.h>}int main (int argc, char * argv[]) {    VideoCapture vid(((string) DATA_DIR)+"/videoSamples/baby2.mp4");    int fps = vid.get(CV_CAP_PROP_FPS);    vector<double> foreheadIntensities;    vector<double> foreheadGreenIntensities;    vector<double> foreheadMeanIntensities;    Mat in;    // Forehead mask    // Rect mask(260, 320, 1920-700, 1080-650);    // Baby mask 1    // Rect mask(290, 100, 60, 60);    // Baby mask 2    Rect mask(350, 85, 80, 75);    int framesCount = 0;    for(int i = 0; framesCount < 425; i++) {        vid >> in;        if (i < 50) continue;        if (!in.data) {            break;        }        in = in(mask);//        printRectOnFrame(in, mask, Scalar(255,255,255));        Scalar frameSum = sum(in);        foreheadIntensities.push_back(frameSum[RED_CHANNEL] + frameSum[GREEN_CHANNEL] + frameSum[BLUE_CHANNEL]);        foreheadGreenIntensities.push_back(frameSum[GREEN_CHANNEL]);        Scalar color = mean(in);        foreheadMeanIntensities.push_back(color[GREEN_CHANNEL]);        imshow("window",in);        framesCount++;        if (waitKey(1) >= 0) break;    }//    saveIntensities(foreheadIntensities, (string) DATA_DIR+"/wristIntensities.txt");    cout << (int) round(findStrongestRowFreq(foreheadIntensities, framesCount, fps));    cout << "\n";//    saveIntensities(foreheadGreenIntensities, (string) DATA_DIR+"/wristIntensities_green.txt");    cout << (int) round(findStrongestRowFreq(foreheadGreenIntensities, framesCount, fps));    cout << "\n";//    saveIntensities(foreheadMeanIntensities, (string) DATA_DIR+"/wristIntensities_green_mean.txt");    cout << (int) round(findStrongestRowFreq(foreheadMeanIntensities, framesCount, fps));    cout << "\n";    return 0;}